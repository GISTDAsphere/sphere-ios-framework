// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SphereSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import Foundation
@_exported import SphereSDK
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum SphereTurn : Swift.Int {
  case Left
  case Right
  case SlightLeft
  case SlightRight
  case Unknown
  case Straight
  case Tollway
  case Arrive
  case Ferry
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SphereLocale : Swift.String {
  case English
  case Thai
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class Sphere : WebKit.WKWebView, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency public var apiKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public var server: Swift.String
  @_Concurrency.MainActor @preconcurrency public var options: SphereSDK.Sphere.Option
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isInspectable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_inheritsConvenienceInitializers public class Option : ObjectiveC.NSObject {
    public var layer: SphereSDK.Sphere.SphereStatic
    public var zoom: Swift.Int
    public var zoomRange: Swift.ClosedRange<Swift.Int>
    public var location: CoreLocation.CLLocationCoordinate2D
    public var lastView: Swift.Bool
    public var onReady: (() -> Swift.Void)?
    @objc override dynamic public init()
    public func toDictionary() -> [Swift.String : Any]
    @objc deinit
  }
  public struct SphereStatic : Swift.Hashable {
    public let type: Swift.String
    public let name: Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SphereSDK.Sphere.SphereStatic, b: SphereSDK.Sphere.SphereStatic) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SphereFunction : Swift.Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SphereSDK.Sphere.SphereFunction, b: SphereSDK.Sphere.SphereFunction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct SphereObject : Any, Swift.Equatable {
    public static func == (lhs: SphereSDK.Sphere.SphereObject, rhs: SphereSDK.Sphere.SphereObject) -> Swift.Bool
    public let type: Swift.String
  }
  @_Concurrency.MainActor @preconcurrency public func createSphereStatic(_ type: Swift.String, with name: Swift.String) -> SphereSDK.Sphere.SphereStatic
  @_Concurrency.MainActor @preconcurrency public func createSphereObject(_ type: Swift.String, with params: [Any]) -> SphereSDK.Sphere.SphereObject
  @_Concurrency.MainActor @preconcurrency public func createSphereFunction(_ function: Swift.String) -> SphereSDK.Sphere.SphereFunction
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor @preconcurrency public func render()
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor @preconcurrency public func call(method: Swift.String, args: [Any]?, completionHandler: @escaping ((Any?) -> Swift.Void)) -> Any?
  @_Concurrency.MainActor @preconcurrency public func call(method: Swift.String, args: [Any]?) -> Any?
  @_Concurrency.MainActor @preconcurrency public func objectCall(sphereObject: SphereSDK.Sphere.SphereObject, method: Swift.String, args: [Any]?) -> Any?
  @objc deinit
}
extension SphereSDK.SphereTurn : Swift.Equatable {}
extension SphereSDK.SphereTurn : Swift.Hashable {}
extension SphereSDK.SphereTurn : Swift.RawRepresentable {}
extension SphereSDK.SphereLocale : Swift.Equatable {}
extension SphereSDK.SphereLocale : Swift.Hashable {}
extension SphereSDK.SphereLocale : Swift.RawRepresentable {}
